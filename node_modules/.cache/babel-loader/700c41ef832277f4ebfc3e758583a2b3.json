{"ast":null,"code":"import _regeneratorRuntime from \"/Users/charlie/code/ex/exhiibeo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _classCallCheck from \"/Users/charlie/code/ex/exhiibeo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/charlie/code/ex/exhiibeo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/charlie/code/ex/exhiibeo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/charlie/code/ex/exhiibeo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/charlie/code/ex/exhiibeo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/charlie/code/ex/exhiibeo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { windowRef } from '../MockWindow';\nimport { Logger } from '../utils/Logger';\nimport { PeerManager } from '../managers/PeerManager';\nimport { TransportType } from '../types/transport/TransportType';\nimport { ExtensionMessageTarget } from '../types/ExtensionMessageTarget';\nimport { TransportStatus } from '../types/transport/TransportStatus';\nimport { Origin } from '../types/Origin';\nimport { PostMessageClient } from './clients/PostMessageClient';\nimport { Transport } from './Transport';\nvar logger = new Logger('PostMessageTransport');\nvar listeningForExtensions = false;\nvar extensionsPromise;\nvar extensions;\n\nvar addExtension = function addExtension(extension) {\n  if (!extensions) {\n    extensions = [];\n  }\n\n  if (!extensions.some(function (ext) {\n    return ext.id === extension.id;\n  })) {\n    extensions.push(extension);\n    windowRef.postMessage('extensionsUpdated', windowRef.location.origin);\n  }\n};\n/**\n * @internalapi\n *\n *\n */\n\n\nexport var PostMessageTransport = /*#__PURE__*/function (_Transport) {\n  _inherits(PostMessageTransport, _Transport);\n\n  var _super2 = _createSuper(PostMessageTransport);\n\n  function PostMessageTransport(name, keyPair, storage, storageKey) {\n    var _this;\n\n    _classCallCheck(this, PostMessageTransport);\n\n    _this = _super2.call(this, name, new PostMessageClient(name, keyPair), new PeerManager(storage, storageKey));\n    _this.type = TransportType.POST_MESSAGE;\n    return _this;\n  }\n\n  _createClass(PostMessageTransport, [{\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var _super = Object.create(null, {\n        connect: {\n          get: function get() {\n            return _get(_getPrototypeOf(PostMessageTransport.prototype), \"connect\", _this2);\n          }\n        }\n      });\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n\n        var knownPeers, connectionPromises;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                logger.log('connect');\n\n                if (!(this._isConnected !== TransportStatus.NOT_CONNECTED)) {\n                  _context2.next = 3;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\");\n\n              case 3:\n                this._isConnected = TransportStatus.CONNECTING;\n                _context2.next = 6;\n                return this.getPeers();\n\n              case 6:\n                knownPeers = _context2.sent;\n\n                if (knownPeers.length > 0) {\n                  logger.log('connect', \"connecting to \".concat(knownPeers.length, \" peers\"));\n                  connectionPromises = knownPeers.map(function (peer) {\n                    return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                      return _regeneratorRuntime.wrap(function _callee$(_context) {\n                        while (1) {\n                          switch (_context.prev = _context.next) {\n                            case 0:\n                              return _context.abrupt(\"return\", this.listen(peer.publicKey));\n\n                            case 1:\n                            case \"end\":\n                              return _context.stop();\n                          }\n                        }\n                      }, _callee, this);\n                    }));\n                  });\n                  Promise.all(connectionPromises).catch(function (error) {\n                    return logger.error('connect', error);\n                  });\n                }\n\n                _context2.next = 10;\n                return this.startOpenChannelListener();\n\n              case 10:\n                _context2.next = 12;\n                return _super.connect.call(this);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"startOpenChannelListener\",\n    value: function startOpenChannelListener() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n    }\n  }, {\n    key: \"getPairingRequestInfo\",\n    value: function getPairingRequestInfo() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                return _context4.abrupt(\"return\", this.client.getPairingRequestInfo());\n\n              case 1:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n    }\n  }, {\n    key: \"listen\",\n    value: function listen(publicKey) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this4 = this;\n\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                logger.log('listen', publicKey);\n                _context5.next = 3;\n                return this.client.listenForEncryptedMessage(publicKey, function (message, context) {\n                  var connectionContext = {\n                    origin: Origin.EXTENSION,\n                    id: context.id\n                  };\n\n                  _this4.notifyListeners(message, connectionContext).catch(function (error) {\n                    throw error;\n                  });\n                }).catch(function (error) {\n                  throw error;\n                });\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }], [{\n    key: \"isAvailable\",\n    value: function isAvailable() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                return _context6.abrupt(\"return\", new Promise(function (resolve) {\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  var fn = function fn(event) {\n                    var data = event.data;\n\n                    if (data && data.payload === 'pong') {\n                      resolve(true);\n                      windowRef.removeEventListener('message', fn);\n                    }\n                  };\n\n                  windowRef.addEventListener('message', fn);\n                  var message = {\n                    target: ExtensionMessageTarget.EXTENSION,\n                    payload: 'ping'\n                  }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n                  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                  windowRef.postMessage(message, windowRef.location.origin);\n                }));\n\n              case 1:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6);\n      }));\n    }\n  }, {\n    key: \"getAvailableExtensions\",\n    value: function getAvailableExtensions() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!extensionsPromise) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", extensionsPromise);\n\n              case 2:\n                if (!extensions) {\n                  _context7.next = 4;\n                  break;\n                }\n\n                return _context7.abrupt(\"return\", extensions);\n\n              case 4:\n                extensions = [];\n                extensionsPromise = new Promise(function (resolve) {\n                  PostMessageTransport.listenForExtensions();\n                  setTimeout(function () {\n                    resolve(extensions !== null && extensions !== void 0 ? extensions : []);\n                  }, 1000);\n                }).finally(function () {\n                  extensionsPromise = undefined;\n                });\n                return _context7.abrupt(\"return\", extensionsPromise);\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    }\n  }, {\n    key: \"listenForExtensions\",\n    value: function listenForExtensions() {\n      if (listeningForExtensions) {\n        return;\n      } // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\n      var fn = function fn(event) {\n        var data = event.data;\n        var sender = data.sender;\n\n        if (data && data.payload === 'pong' && sender) {\n          logger.log('getAvailableExtensions', \"extension \\\"\".concat(sender.name, \"\\\" is available\"), sender);\n          addExtension(sender);\n        }\n      };\n\n      windowRef.addEventListener('message', fn);\n      var message = {\n        target: ExtensionMessageTarget.EXTENSION,\n        payload: 'ping'\n      }; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n      windowRef.postMessage(message, windowRef.location.origin);\n      listeningForExtensions = true;\n    }\n  }]);\n\n  return PostMessageTransport;\n}(Transport);","map":{"version":3,"sources":["../../../src/transports/PostMessageTransport.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { windowRef } from '../MockWindow';\nimport { Logger } from '../utils/Logger';\nimport { PeerManager } from '../managers/PeerManager';\nimport { TransportType } from '../types/transport/TransportType';\nimport { ExtensionMessageTarget } from '../types/ExtensionMessageTarget';\nimport { TransportStatus } from '../types/transport/TransportStatus';\nimport { Origin } from '../types/Origin';\nimport { PostMessageClient } from './clients/PostMessageClient';\nimport { Transport } from './Transport';\nconst logger = new Logger('PostMessageTransport');\nlet listeningForExtensions = false;\nlet extensionsPromise;\nlet extensions;\nconst addExtension = (extension) => {\n    if (!extensions) {\n        extensions = [];\n    }\n    if (!extensions.some((ext) => ext.id === extension.id)) {\n        extensions.push(extension);\n        windowRef.postMessage('extensionsUpdated', windowRef.location.origin);\n    }\n};\n/**\n * @internalapi\n *\n *\n */\nexport class PostMessageTransport extends Transport {\n    constructor(name, keyPair, storage, storageKey) {\n        super(name, new PostMessageClient(name, keyPair), new PeerManager(storage, storageKey));\n        this.type = TransportType.POST_MESSAGE;\n    }\n    static isAvailable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve) => {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                const fn = (event) => {\n                    const data = event.data;\n                    if (data && data.payload === 'pong') {\n                        resolve(true);\n                        windowRef.removeEventListener('message', fn);\n                    }\n                };\n                windowRef.addEventListener('message', fn);\n                const message = {\n                    target: ExtensionMessageTarget.EXTENSION,\n                    payload: 'ping'\n                };\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                windowRef.postMessage(message, windowRef.location.origin);\n            });\n        });\n    }\n    static getAvailableExtensions() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (extensionsPromise) {\n                return extensionsPromise;\n            }\n            if (extensions) {\n                return extensions;\n            }\n            extensions = [];\n            extensionsPromise = new Promise((resolve) => {\n                PostMessageTransport.listenForExtensions();\n                setTimeout(() => {\n                    resolve(extensions !== null && extensions !== void 0 ? extensions : []);\n                }, 1000);\n            }).finally(() => {\n                extensionsPromise = undefined;\n            });\n            return extensionsPromise;\n        });\n    }\n    static listenForExtensions() {\n        if (listeningForExtensions) {\n            return;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        const fn = (event) => {\n            const data = event.data;\n            const sender = data.sender;\n            if (data && data.payload === 'pong' && sender) {\n                logger.log('getAvailableExtensions', `extension \"${sender.name}\" is available`, sender);\n                addExtension(sender);\n            }\n        };\n        windowRef.addEventListener('message', fn);\n        const message = {\n            target: ExtensionMessageTarget.EXTENSION,\n            payload: 'ping'\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        windowRef.postMessage(message, windowRef.location.origin);\n        listeningForExtensions = true;\n    }\n    connect() {\n        const _super = Object.create(null, {\n            connect: { get: () => super.connect }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('connect');\n            if (this._isConnected !== TransportStatus.NOT_CONNECTED) {\n                return;\n            }\n            this._isConnected = TransportStatus.CONNECTING;\n            const knownPeers = yield this.getPeers();\n            if (knownPeers.length > 0) {\n                logger.log('connect', `connecting to ${knownPeers.length} peers`);\n                const connectionPromises = knownPeers.map((peer) => __awaiter(this, void 0, void 0, function* () { return this.listen(peer.publicKey); }));\n                Promise.all(connectionPromises).catch((error) => logger.error('connect', error));\n            }\n            yield this.startOpenChannelListener();\n            yield _super.connect.call(this);\n        });\n    }\n    startOpenChannelListener() {\n        return __awaiter(this, void 0, void 0, function* () {\n            //\n        });\n    }\n    getPairingRequestInfo() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.client.getPairingRequestInfo();\n        });\n    }\n    listen(publicKey) {\n        return __awaiter(this, void 0, void 0, function* () {\n            logger.log('listen', publicKey);\n            yield this.client\n                .listenForEncryptedMessage(publicKey, (message, context) => {\n                const connectionContext = {\n                    origin: Origin.EXTENSION,\n                    id: context.id\n                };\n                this.notifyListeners(message, connectionContext).catch((error) => {\n                    throw error;\n                });\n            })\n                .catch((error) => {\n                throw error;\n            });\n        });\n    }\n}\n//# sourceMappingURL=PostMessageTransport.js.map"]},"metadata":{},"sourceType":"module"}